// <auto-generated />
using System;
using MaleFashion.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaleFashion.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250629074802_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaleFashion.Models.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NextPostId")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousPostId")
                        .HasColumnType("int");

                    b.Property<string>("Quote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuoteAuthor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Deercreative",
                            Content = "Hydroderm là kem chống lão hóa rất được ưa chuộng. Sản phẩm này ngăn ngừa các dấu hiệu lão hóa sớm trên da và giữ cho làn da trẻ trung, săn chắc và khỏe mạnh hơn. Nó làm giảm nếp nhăn và sự lỏng lẻo của da. Kem này nuôi dưỡng làn da và mang lại vẻ rạng rỡ đã mất trong những năm bận rộn.",
                            DatePosted = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "~/img/blog/blog-1.jpg",
                            NextPostId = 2,
                            Quote = "Khi thiết kế một quảng cáo cho một sản phẩm cụ thể, cần nghiên cứu nhiều thứ như nơi nó nên được hiển thị.",
                            QuoteAuthor = "John Smith",
                            Tags = "#Fashion,#Trending,#2020",
                            Title = "Những loại máy uốn tóc nào tốt nhất"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Deercreative",
                            Content = "Nhẫn Eternity là biểu tượng của tình yêu vĩnh cửu. Bài viết này sẽ giới thiệu về thiết kế và ý nghĩa của nhẫn Eternity, mang lại sự lựa chọn hoàn hảo cho những dịp đặc biệt.",
                            DatePosted = new DateTime(2020, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "~/img/blog/blog-2.jpg",
                            NextPostId = 3,
                            PreviousPostId = 1,
                            Quote = "Tình yêu bền vững như những viên kim cương trên nhẫn Eternity.",
                            QuoteAuthor = "Jane Doe",
                            Tags = "#Jewelry,#Wedding",
                            Title = "Nhẫn Eternity bền mãi mãi"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Deercreative",
                            Content = "Kính mát không chỉ là phụ kiện thời trang mà còn bảo vệ mắt khỏi tia UV. Bài viết này khám phá các lợi ích sức khỏe của việc đeo kính mát.",
                            DatePosted = new DateTime(2020, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "~/img/blog/blog-3.jpg",
                            NextPostId = 4,
                            PreviousPostId = 2,
                            Quote = "Bảo vệ đôi mắt cũng là bảo vệ sức khỏe.",
                            QuoteAuthor = "Dr. Lee",
                            Tags = "#Health,#Fashion",
                            Title = "Lợi ích sức khỏe của kính mát"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Deercreative",
                            Content = "Phẫu thuật nâng ngực là lựa chọn phổ biến để cải thiện vóc dáng. Bài viết này cung cấp thông tin về quy trình và lợi ích.",
                            DatePosted = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "~/img/blog/blog-4.jpg",
                            NextPostId = 5,
                            PreviousPostId = 3,
                            Quote = "Tự tin với cơ thể là chìa khóa của vẻ đẹp.",
                            QuoteAuthor = "Anna Smith",
                            Tags = "#Beauty,#Health",
                            Title = "Phẫu thuật nâng ngực - nâng cao sắc đẹp"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Deercreative",
                            Content = "Nhẫn cưới là biểu tượng của tình yêu và cam kết. Bài viết này chia sẻ các mẫu nhẫn cưới đẹp và ý nghĩa.",
                            DatePosted = new DateTime(2020, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "~/img/blog/blog-5.jpg",
                            NextPostId = 6,
                            PreviousPostId = 4,
                            Quote = "Một chiếc nhẫn, một lời hứa vĩnh cửu.",
                            QuoteAuthor = "Emily Brown",
                            Tags = "#Wedding,#Jewelry",
                            Title = "Nhẫn cưới - Món quà cả đời"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Deercreative",
                            Content = "Tẩy lông là một phần quan trọng trong chăm sóc cá nhân. Bài viết này so sánh các phương pháp tẩy lông phổ biến.",
                            DatePosted = new DateTime(2020, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "~/img/blog/blog-6.jpg",
                            NextPostId = 7,
                            PreviousPostId = 5,
                            Quote = "Làn da mịn màng là sự tự tin.",
                            QuoteAuthor = "Sarah Wilson",
                            Tags = "#Beauty,#Skincare",
                            Title = "Các phương pháp tẩy lông khác nhau"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Deercreative",
                            Content = "Bông tai vòng đã tồn tại qua nhiều thế kỷ và vẫn là xu hướng thời trang. Bài viết này khám phá lịch sử và phong cách của chúng.",
                            DatePosted = new DateTime(2020, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "~/img/blog/blog-7.jpg",
                            NextPostId = 8,
                            PreviousPostId = 6,
                            Quote = "Đơn giản nhưng nổi bật.",
                            QuoteAuthor = "Lisa Taylor",
                            Tags = "#Fashion,#Jewelry",
                            Title = "Bông tai vòng - phong cách từ lịch sử"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Deercreative",
                            Content = "Phẫu thuật Lasik mang lại thị lực rõ nét mà không cần kính. Bài viết này giải thích quy trình và những điều cần biết.",
                            DatePosted = new DateTime(2020, 2, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "~/img/blog/blog-8.jpg",
                            NextPostId = 9,
                            PreviousPostId = 7,
                            Quote = "Nhìn thế giới rõ hơn với Lasik.",
                            QuoteAuthor = "Dr. Kim",
                            Tags = "#Health,#Vision",
                            Title = "Phẫu thuật mắt Lasik - Bạn đã sẵn sàng chưa"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Deercreative",
                            Content = "Phẫu thuật Lasik mang lại thị lực rõ nét mà không cần kính. Bài viết này cung cấp thêm chi tiết về lợi ích và rủi ro.",
                            DatePosted = new DateTime(2020, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "~/img/blog/blog-9.jpg",
                            PreviousPostId = 8,
                            Quote = "Tự do khỏi kính mắt với Lasik.",
                            QuoteAuthor = "Dr. Park",
                            Tags = "#Health,#Vision",
                            Title = "Phẫu thuật mắt Lasik - Bạn đã sẵn sàng chưa"
                        });
                });

            modelBuilder.Entity("MaleFashion.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Túi xách"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Quần áo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Giày dép"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Phụ kiện"
                        });
                });

            modelBuilder.Entity("MaleFashion.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogPostId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlogPostId = 1,
                            Content = "Bài viết rất hữu ích, cảm ơn!",
                            DatePosted = new DateTime(2020, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "user1@example.com"
                        },
                        new
                        {
                            Id = 2,
                            BlogPostId = 1,
                            Content = "Tôi đang tìm loại máy uốn tóc tốt, bài này giúp tôi hiểu rõ hơn!",
                            DatePosted = new DateTime(2020, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "user2@example.com"
                        },
                        new
                        {
                            Id = 3,
                            BlogPostId = 2,
                            Content = "Nhẫn Eternity thật sự rất đẹp!",
                            DatePosted = new DateTime(2020, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "user3@example.com"
                        },
                        new
                        {
                            Id = 4,
                            BlogPostId = 3,
                            Content = "Tôi không biết kính mát có lợi ích sức khỏe, cảm ơn bài viết!",
                            DatePosted = new DateTime(2020, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "user4@example.com"
                        });
                });

            modelBuilder.Entity("MaleFashion.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MaleFashion.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MaleFashion.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Color = "Black",
                            Description = "A stylish black biker jacket made from premium piqué fabric.",
                            ImageUrl = "~/img/product/product-1.jpg",
                            IsNew = true,
                            IsOnSale = false,
                            Name = "Piqué Biker Jacket",
                            Price = 67.24m,
                            Rating = 0,
                            Size = "M"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Color = "Blue",
                            Description = "A modern blue biker jacket with a sleek design.",
                            ImageUrl = "~/img/product/product-2.jpg",
                            IsNew = false,
                            IsOnSale = true,
                            Name = "Piqué Biker Jacket 2",
                            Price = 67.24m,
                            Rating = 0,
                            Size = "L"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Color = "Black",
                            Description = "A versatile black chest bag with multiple pockets for convenience.",
                            ImageUrl = "~/img/product/product-3.jpg",
                            IsNew = false,
                            IsOnSale = true,
                            Name = "Multi-pocket Chest Bag",
                            Price = 43.48m,
                            Rating = 4,
                            Size = "One Size"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Color = "Grey",
                            Description = "A trendy grey cap with a unique diagonal texture.",
                            ImageUrl = "~/img/product/product-4.jpg",
                            IsNew = false,
                            IsOnSale = false,
                            Name = "Diagonal Textured Cap",
                            Price = 60.90m,
                            Rating = 0,
                            Size = "One Size"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Color = "Brown",
                            Description = "A durable brown leather backpack for everyday use.",
                            ImageUrl = "~/img/product/product-5.jpg",
                            IsNew = true,
                            IsOnSale = false,
                            Name = "Lether Backpack",
                            Price = 31.37m,
                            Rating = 0,
                            Size = "One Size"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Color = "Black",
                            Description = "Classic black ankle boots crafted for comfort and style.",
                            ImageUrl = "~/img/product/product-6.jpg",
                            IsNew = false,
                            IsOnSale = true,
                            Name = "Ankle Boots",
                            Price = 98.49m,
                            Rating = 4,
                            Size = "42"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Color = "White",
                            Description = "A casual white t-shirt with a contrast pocket design.",
                            ImageUrl = "~/img/product/product-7.jpg",
                            IsNew = true,
                            IsOnSale = false,
                            Name = "T-shirt Contrast Pocket",
                            Price = 49.66m,
                            Rating = 0,
                            Size = "M"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Color = "Red",
                            Description = "A lightweight red scarf for a stylish accessory.",
                            ImageUrl = "~/img/product/product-8.jpg",
                            IsNew = false,
                            IsOnSale = false,
                            Name = "Basic Flowing Scarf",
                            Price = 26.28m,
                            Rating = 0,
                            Size = "One Size"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Color = "Blue",
                            Description = "Comfortable blue slim fit jeans for a modern look.",
                            ImageUrl = "~/img/product/product-9.jpg",
                            IsNew = true,
                            IsOnSale = false,
                            Name = "Slim Fit Jeans",
                            Price = 55.99m,
                            Rating = 3,
                            Size = "32"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Color = "White",
                            Description = "Stylish white leather sneakers for casual wear.",
                            ImageUrl = "~/img/product/product-10.jpg",
                            IsNew = false,
                            IsOnSale = true,
                            Name = "Leather Sneakers",
                            Price = 89.99m,
                            Rating = 4,
                            Size = "41"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            Color = "Grey",
                            Description = "A cozy grey woolen hat for cold weather.",
                            ImageUrl = "~/img/product/product-11.jpg",
                            IsNew = true,
                            IsOnSale = false,
                            Name = "Woolen Hat",
                            Price = 15.99m,
                            Rating = 2,
                            Size = "One Size"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            Color = "Beige",
                            Description = "A practical beige canvas tote bag for daily use.",
                            ImageUrl = "~/img/product/product-12.jpg",
                            IsNew = false,
                            IsOnSale = false,
                            Name = "Canvas Tote Bag",
                            Price = 39.99m,
                            Rating = 3,
                            Size = "One Size"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 2,
                            Color = "Green",
                            Description = "A comfortable green hooded sweatshirt for casual wear.",
                            ImageUrl = "~/img/product/product-13.jpg",
                            IsNew = true,
                            IsOnSale = false,
                            Name = "Hooded Sweatshirt",
                            Price = 45.00m,
                            Rating = 0,
                            Size = "L"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            Color = "Black",
                            Description = "Sleek black sunglasses with UV protection.",
                            ImageUrl = "~/img/product/product-14.jpg",
                            IsNew = false,
                            IsOnSale = true,
                            Name = "Sunglasses",
                            Price = 29.99m,
                            Rating = 5,
                            Size = "One Size"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MaleFashion.Models.Comment", b =>
                {
                    b.HasOne("MaleFashion.Models.BlogPost", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("MaleFashion.Models.OrderItem", b =>
                {
                    b.HasOne("MaleFashion.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaleFashion.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MaleFashion.Models.Product", b =>
                {
                    b.HasOne("MaleFashion.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaleFashion.Models.BlogPost", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MaleFashion.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MaleFashion.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
